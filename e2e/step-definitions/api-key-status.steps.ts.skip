import { Given, When, Then } from '@wdio/cucumber-framework';
import { expect } from '@wdio/globals';
// import { execSync } from 'child_process';

// --- Selectors ---
const API_KEY_STATUS_COMPONENT_SELECTOR = '[data-testid="api-key-status"]';

//execSync('sqlite3  ./e2e/test-storage/metadata.db "CREATE TABLE IF NOT EXISTS meaningfully_settings (settings_id INTEGER PRIMARY KEY AUTOINCREMENT,  settings TEXT NOT NULL );" "CREATE TABLE IF NOT EXISTS document_sets ( set_id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL UNIQUE, upload_date TEXT NOT NULL, parameters TEXT NOT NULL, total_documents INTEGER NOT NULL DEFAULT 0);"');

// --- Steps ---

Given("the application has started", async () => {
    // WebdriverIO Electron service typically handles app launch automatically.
    // You might add a small wait here if needed for the UI to stabilize.
    await browser.pause(500); // Optional: Adjust as needed
});

Given("the settings store is empty", async () => {
    //execSync('sqlite3  ./e2e/test-storage/metadata.db "DELETE FROM meaningfully_settings"');
    
});

Given("the setting store has an OpenAI API Key value", async () => {
    //execSync('sqlite3  ./e2e/test-storage/metadata.db "DELETE FROM meaningfully_settings"');
    //execSync('sqlite3  ./e2e/test-storage/metadata.db "INSERT INTO meaningfully_settings (settings) VALUES (\'sk-proj-test-1234567890\')"');
});

// TODO DRY 
Given("the page has been reloaded", async () => {
    // Reload the current page  
    // await browser.reloadSession();
    const currentUrl = await browser.getUrl();
    await browser.url(currentUrl);
});

// TODO DRY 
Then("the {string} component should be visible", async (componentName: string) => {
    let selector: string;
    switch (componentName) {
        case "API Key Status":
            selector = API_KEY_STATUS_COMPONENT_SELECTOR;
            break;
        default:
            throw new Error(`Unknown component name: ${componentName}`);
    }
    const component = await $(selector);
    await expect(component).toBeDisplayed();
});

// TODO DRY 
Then("the {string} component should not be visible", async (componentName: string) => {
    let selector: string;
    switch (componentName) {
        case "API Key Status":
            selector = API_KEY_STATUS_COMPONENT_SELECTOR;
            break;
        default:
            throw new Error(`Unknown component name: ${componentName}`);
    }
    const component = await $$(selector);
    await expect(component).not.toBeDisplayed();
});
