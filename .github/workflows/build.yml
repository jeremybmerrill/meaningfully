name: Build Distributions

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build-apple:
    name: Build macOS
    runs-on: macos-latest
    environment: "mac build" 
    outputs:
      artifact-folder: ${{ steps.upload.outputs.artifact-folder }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure Node caching
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test
        timeout-minutes: 5

      - name: Build distribution (macOS)
        env:
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build:mac -- --publish always

      - name: Create README
        run: |
          echo "More information: https://github.com/jeremybmerrill/meaningfully" > dist/README.txt

      - name: Upload artifact (macOS)
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: meaningfully-macOS
          path: |
            dist/meaningfully-${{ github.ref_name }}.dmg
            dist/README.txt

  # build-windows:
  #   name: Build Windows
  #   runs-on: windows-latest
  #   environment: "mac build" 
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Configure Node caching
  #       uses: actions/cache@v4
  #       with:
  #         path: ~\AppData\Local\npm-cache
  #         key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: ${{ runner.os }}-npm-

  #     - name: Setup MSYS2
  #       uses: msys2/setup-msys2@v2
  #       with:
  #         msystem: MINGW64
  #         update: true
  #         install: >-
  #           mingw-w64-x86_64-gtk3
  #           mingw-w64-x86_64-pkg-config
  #           mingw-w64-x86_64-cairo
  #           mingw-w64-x86_64-pango
  #           mingw-w64-x86_64-libjpeg-turbo
  #           mingw-w64-x86_64-giflib
  #           mingw-w64-x86_64-librsvg
  #           base-devel
  #           gcc

  #     - name: Add MSYS2 to PATH
  #       shell: pwsh
  #       run: |
  #         echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
  #         echo "C:\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

  #     - name: Install dependencies
  #       run: npm install

  #     - name: Run tests
  #       run: npm test
  #       timeout-minutes: 5

  #     - name: Build distribution (Windows)
  #       env:
  #         CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
  #         CSC_LINK: ${{ secrets.CSC_LINK }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: npm run build:win -- --publish always

  #     - name: Create README
  #       run: 'echo "More information: https://github.com/jeremybmerrill/meaningfully" > dist\README.txt'

  #     - name: Upload artifact (Windows)
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: meaningfully-windows
  #         path: |
  #           dist/meaningfully-${{ github.ref_name }}.exe
  #           dist/meaningfully-${{ github.ref_name }}-portable.exe
  #           dist\README.txt

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    environment: "mac build" 
    steps:
      - uses: actions/checkout@v4

      - name: Configure Node caching
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: Install Linux Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev libarchive-tools libfuse2 libgtk-3-0 libnss3 libxshmfence1 libatk-bridge2.0-0 libx11-xcb1 libxcb-dri3-0 libxcomposite1 libxcursor1 libxdamage1 libxfixes3 libxi6 libxrandr2 libxtst6 libgbm1 libpangocairo-1.0-0 libpango-1.0-0 libcairo2 libatspi2.0-0
          # sudo snap install snapcraft --classic

      - name: Install dependencies
        run: npm install
    
      - name: Run tests
        run: npm test
        timeout-minutes: 5

      - name: TEMP, is snapcraft var available?
        env:
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}          
        run: |
          echo $SNAPCRAFT_STORE_CREDENTIALS

      - name: Build distribution (Linux)
        env:
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}          
        run: npm run build:linux -- --publish always

      - name: Create README
        run: 'echo "More information: https://github.com/jeremybmerrill/meaningfully" > dist/README.txt'

      - name: Upload artifact (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: meaningfully-linux
          # add back once fixed dist/meaningfully-${{ github.ref_name }}.snap

          path: |
            dist/meaningfully-${{ github.ref_name }}.deb
            dist/meaningfully-${{ github.ref_name }}.AppImage
            dist/README.txt
    
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    environment: "mac build"
    needs:
      - build-apple
      # - build-intel
      # - build-windows
      - build-linux
    steps:
      - uses: actions/checkout@v4

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: meaningfully-macOS
          path: ./artifacts/macOS

      # - name: Download macOS (Intel) artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: meaningfully-macOS-intel
      #     path: ./artifacts/macOS-intel

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: meaningfully-linux
          path: ./artifacts/linux

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            ./artifacts/macOS/meaningfully-${{ github.ref_name }}.dmg
            ./artifacts/linux/meaningfully-${{ github.ref_name }}.deb
            ./artifacts/linux/meaningfully-${{ github.ref_name }}.AppImage
          #  ./artifacts/macOS-intel/meaningfully-${{ github.ref_name }}.x86.dmg
          